FORMAT: 1A
HOST: https://petscollection.herokuapp.com/

# rest_tutorial
It's a simple API allowing user to view information of pets.

### Allowed HTTPs requests:
<pre>
POST    : To create resource 
PUT     : Update resource
GET     : Get a resource or list of resources
DELETE  : To delete resource
</pre>

### Description Of Usual Server Responses:
- 200 `OK` - the request was successful (some API calls may return 201 instead).
- 201 `Created` - the request was successful and a resource was created.
- 204 `No Content` - the request was successful but there is no representation to return (i.e. the response is empty).
- 400 `Bad Request` - the request could not be understood or was missing required parameters.
- 404 `Not Found` - resource was not found.
- 405 `Method Not Allowed` - requested method is not supported for resource.

# Pets
Represents pets details. 

---
**Pets attributes:**

- id `(Number)` : unique identifier. 
- name `(String)` : Name of pets.
- species `(String)` : Species of pets.
- breed `(String)` : Breed of pets.
---

## Pets Collection [/pets/]

### Get All Pets [GET]

+ Response 200 (application/json)

        [
            {
                "_id": "5cbd7ef4b3dedb055ca04503",
                "name": "Liam",
                "species": "cat",
                "breed": "tabby"
            },
            {
                "_id": "5cbdb86fb3dedb055ca04504",
                "name": "Spot",
                "species": "dog",
                "breed": "pitbull"
            },
            {
                "_id": "5cbdb8a4b3dedb055ca04505",
                "name": "Daisy",
                "species": "cat",
                "breed": "calico"
            },
            {
                "_id": "5cbdb8c5b3dedb055ca04506",
                "name": "Bella",
                "species": "dog",
                "breed": "australian shepard"
            },
            {
                "_id": "5cc8745244d9ca1cacdb0cff",
                "name": null,
                "species": null,
                "breed": null
            },
            {
                "_id": "5cc8747844d9ca1cacdb0d00",
                "name": "Liam",
                "species": "cat",
                "breed": "tabby"
            },
            {
                "_id": "5cc874fd44d9ca1cacdb0d01",
                "name": "Liam",
                "species": "cat",
                "breed": "tabby"
            }
        ]

### Add a New Pet Information [POST]

You may add new pet data using this action. It takes a JSON object 
containing (name, species, and breed), and assigns it a new ObjectId.
This object is then inserted into the pets collection, and the new 
Pets object is returned.

+ Request (application/json)

        {
            "name": "Liam",
            "species": "cat",
            "breed": "tabby"
        }    

+ Response 201 (application/json)
    
    + Headers
            
            Location: /pets/id

    + Body

            {
                "name": "Liam",
                "species": "cat",
                "breed": "tabby"
            }
## Access pets Informations by id : [/Students/{id}]

---

### Get a spacific pets data [GET]


+ Parameters
    + id (number) - ID of the Pet in the form of a string

+ Response 200 (application/json)
        
        {
           "name": "Liam",
           "species": "cat",
            "breed": "tabby"
        }

            
##Modify Pets Information  [/pets/{id}]

+ Parameters
    + id (number) - ID of the Pet in the form of a string
    
### Update Pets data [PUT/id]

You may updates existing pet infromation using this action.
It takes a JSON object containing (name, species, and breed).
The id in the request URL is the _id of the document to be modified.

+ Request (application/json)

        {
            "name": "Liam",
            "species": "cat",
            "breed": "tabby"
        }

+ Response 200 (application/json)

### Delete pets data [DELETE/id]
                Thanks for using our app.
+ Response 204